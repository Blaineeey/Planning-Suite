generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  role           String    @default("USER")
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  projects       Project[]
  leads          Lead[]
  tasks          Task[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  
  users     User[]
  projects  Project[]
  leads     Lead[]
  vendors   Vendor[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id             String    @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  firstName      String
  lastName       String
  email          String
  phone          String?
  
  status         String    @default("NEW")
  
  assignedTo     String?
  assignedUser   User?     @relation(fields: [assignedTo], references: [id])
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Project {
  id             String    @id @default(cuid())
  name           String
  status         String    @default("ACTIVE")
  
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  plannerId      String
  planner        User      @relation(fields: [plannerId], references: [id])
  
  tasks          Task[]
  vendors        ProjectVendor[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TODO")
  
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  
  assignedTo  String?
  assignedUser User?    @relation(fields: [assignedTo], references: [id])
  
  dueDate     DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vendor {
  id             String    @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  businessName   String
  email          String    @unique
  phone          String?
  
  projects       ProjectVendor[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model ProjectVendor {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  
  @@unique([projectId, vendorId])
}
