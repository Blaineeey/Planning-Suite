'use client';

import { useState, useEffect } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  PaymentElement,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';
import { CreditCard, Lock, CheckCircle, AlertCircle } from 'lucide-react';

// Initialize Stripe
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_placeholder');

function CheckoutForm({ invoice, onSuccess, onError }) {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessing, setIsProcessing] = useState(false);
  const [message, setMessage] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setIsProcessing(true);
    setMessage(null);

    try {
      const { error, paymentIntent } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/dashboard/payments/success`,
        },
        redirect: 'if_required'
      });

      if (error) {
        setMessage(error.message);
        onError(error);
      } else if (paymentIntent.status === 'succeeded') {
        setMessage('Payment successful!');
        onSuccess(paymentIntent);
      }
    } catch (err) {
      setMessage('An unexpected error occurred.');
      onError(err);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <PaymentElement 
        options={{
          layout: 'tabs',
          defaultValues: {
            billingDetails: {
              email: invoice?.clientEmail || '',
              name: invoice?.clientName || ''
            }
          }
        }}
      />
      
      {message && (
        <div className={`rounded-lg p-4 ${
          message.includes('successful') 
            ? 'bg-green-50 text-green-800' 
            : 'bg-red-50 text-red-800'
        }`}>
          <div className="flex items-center">
            {message.includes('successful') ? (
              <CheckCircle size={20} className="mr-2" />
            ) : (
              <AlertCircle size={20} className="mr-2" />
            )}
            <span>{message}</span>
          </div>
        </div>
      )}

      <button
        type="submit"
        disabled={!stripe || isProcessing}
        className={`w-full py-3 px-4 rounded-lg font-medium text-white flex items-center justify-center space-x-2 ${
          isProcessing || !stripe
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700'
        }`}
      >
        {isProcessing ? (
          <>
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
            <span>Processing...</span>
          </>
        ) : (
          <>
            <Lock size={18} />
            <span>Pay ${invoice?.total?.toFixed(2) || '0.00'}</span>
          </>
        )}
      </button>

      <div className="text-center text-sm text-gray-500">
        <Lock size={14} className="inline mr-1" />
        Your payment information is secure and encrypted
      </div>
    </form>
  );
}

export default function PaymentForm({ invoice, clientSecret, onSuccess, onError }) {
  const [ready, setReady] = useState(false);

  useEffect(() => {
    if (clientSecret) {
      setReady(true);
    }
  }, [clientSecret]);

  if (!ready) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
        <span className="ml-3 text-gray-600">Initializing payment...</span>
      </div>
    );
  }

  const appearance = {
    theme: 'stripe',
    variables: {
      colorPrimary: '#e91e63',
      colorBackground: '#ffffff',
      colorText: '#1f2937',
      colorDanger: '#ef4444',
      fontFamily: 'system-ui, -apple-system, sans-serif',
      borderRadius: '8px'
    }
  };

  const options = {
    clientSecret,
    appearance
  };

  return (
    <div className="max-w-md mx-auto">
      <div className="bg-white rounded-xl shadow-sm p-6">
        {/* Invoice Summary */}
        <div className="mb-6 pb-6 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Invoice #{invoice?.number || 'N/A'}
          </h3>
          
          <div className="space-y-2">
            {invoice?.items?.map((item, index) => (
              <div key={index} className="flex justify-between text-sm">
                <span className="text-gray-600">{item.description}</span>
                <span className="text-gray-900 font-medium">
                  ${item.total?.toFixed(2)}
                </span>
              </div>
            ))}
          </div>
          
          <div className="mt-4 pt-4 border-t border-gray-100">
            <div className="flex justify-between">
              <span className="text-gray-600">Subtotal</span>
              <span className="text-gray-900">
                ${invoice?.subtotal?.toFixed(2) || '0.00'}
              </span>
            </div>
            {invoice?.tax > 0 && (
              <div className="flex justify-between mt-2">
                <span className="text-gray-600">Tax</span>
                <span className="text-gray-900">
                  ${invoice?.tax?.toFixed(2)}
                </span>
              </div>
            )}
            <div className="flex justify-between mt-3 pt-3 border-t border-gray-100">
              <span className="text-lg font-semibold text-gray-900">Total</span>
              <span className="text-lg font-semibold text-purple-600">
                ${invoice?.total?.toFixed(2) || '0.00'}
              </span>
            </div>
          </div>
        </div>

        {/* Payment Form */}
        <Elements stripe={stripePromise} options={options}>
          <CheckoutForm 
            invoice={invoice}
            onSuccess={onSuccess}
            onError={onError}
          />
        </Elements>
      </div>
    </div>
  );
}
